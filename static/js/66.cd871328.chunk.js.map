{"version":3,"file":"static/js/66.cd871328.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/types.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { IFormValues } from \"../../components/ContactForm/types\";\r\n\r\nconst initialValues: IFormValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n  challenges: [],\r\n  otherChallenge: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IFormValues): Partial<IFormValues> }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IFormValues;\r\n    errors: Partial<IFormValues>;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n    return errors;\r\n  };\r\n\r\n  const handleChange = (\r\n    name: string,\r\n    value: string | string[]\r\n  ) => {\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { IFormValues } from \"../../components/ContactForm/types\";\r\n\r\nconst validate = (values: IFormValues): Partial<IFormValues> => {\r\n  const errors: Partial<IFormValues> = {};\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Invalid email format\";\r\n  }\r\n\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n\r\n  if (!values.challenges || values.challenges.length === 0) {\r\n    errors.challenges = [\"Please select at least one challenge\"];\r\n  } else if (values.challenges.includes(\"Other\") && !values.otherChallenge?.trim()) {\r\n    errors.challenges = [\"Please specify your challenge in the Other field\"];\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validate;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding: 0 0.675rem;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n\r\nexport const ChallengeOption = styled(\"div\")`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nexport const ChallengeLabel = styled(\"label\")`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Checkbox = styled(\"input\")`\r\n  margin-right: 0.5rem;\r\n  width: 1.5em;\r\n`;\r\n\r\nexport const OtherInputContainer = styled(\"div\")`\r\n  margin-left: 2rem;\r\n  margin-bottom: 0.5rem;\r\n  width: calc(100% - 2rem);\r\n  \r\n  .other-input {\r\n    padding: 8px;\r\n    width: 100%;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    font-size: 0.875rem;\r\n    \r\n    &:focus {\r\n      border-color: rgb(103, 58, 183);\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n","export interface ContactProps {\r\n  title: string;\r\n  content: string;\r\n  id: string;\r\n  t: any;\r\n}\r\n\r\nexport interface IFormValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n  challenges: string[];\r\n  otherChallenge?: string;\r\n}\r\n\r\nexport const challengeOptions = [\r\n  \"Challenge in maintaining consistent code review quality and timeliness across different time zones\",\r\n  \"Team members are blocked but don't report it promptly, leading to delayed problem resolution and missed deadlines\",\r\n  \"Asynchronous communication delays causing bottlenecks in decision-making and project progress\",\r\n  \"Difficulty in detecting early signs of project risks or technical debt when team members work independently\",\r\n  \"Team members working on unplanned tasks without proper alignment with sprint goals or priorities\",\r\n  \"Spending excessive time in back-and-forth chat conversations that could be resolved quickly in person\",\r\n  \"Uncertainty about whether missed deadlines are due to technical challenges or poor time management\",\r\n  \"Difficulty in measuring individual productivity without micromanaging or creating unnecessary pressure\"\r\n];\r\n","import { useState } from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { \r\n  ContactContainer, \r\n  FormGroup, \r\n  Span, \r\n  Label, \r\n  ButtonContainer,\r\n  ChallengeOption,\r\n  ChallengeLabel,\r\n  Checkbox,\r\n  OtherInputContainer \r\n} from \"./styles\";\r\nimport { ContactProps, challengeOptions } from \"./types\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedChallenges, setSelectedChallenges] = useState<string[]>([]);\r\n  const [otherValue, setOtherValue] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    handleChange(e.target.name, e.target.value);\r\n  };\r\n\r\n  const handleChallengeChange = (challenge: string) => {\r\n    let updatedChallenges: string[];\r\n    \r\n    if (challenge === \"Other\") {\r\n      if (selectedChallenges.includes(\"Other\")) {\r\n        updatedChallenges = selectedChallenges.filter(c => c !== \"Other\");\r\n        setOtherValue(\"\");\r\n      } else {\r\n        updatedChallenges = [...selectedChallenges, \"Other\"];\r\n      }\r\n    } else {\r\n      updatedChallenges = selectedChallenges.includes(challenge)\r\n        ? selectedChallenges.filter(c => c !== challenge)\r\n        : [...selectedChallenges, challenge];\r\n    }\r\n    \r\n    setSelectedChallenges(updatedChallenges);\r\n    handleChange(\"challenges\", updatedChallenges);\r\n  };\r\n\r\n  const submitForm = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    const validationErrors = handleSubmit(e);\r\n\r\n    if (Object.keys(validationErrors).length === 0) {\r\n      setLoading(true);\r\n      \r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"entry.602484349\", values.name);\r\n        formData.append(\"entry.1839736380\", values.email);\r\n        formData.append(\"entry.1820855826\", values.message);\r\n\r\n        values.challenges.forEach(challenge => {\r\n          if (challenge !== \"Other\") {\r\n            formData.append(\"entry.1030791043\", challenge);\r\n          }\r\n        });\r\n\r\n        if (selectedChallenges.includes(\"Other\") && otherValue) {\r\n          formData.append(\"entry.1030791043\", \"__other_option__\");\r\n          formData.append(\"entry.1030791043.other_option_response\", otherValue);\r\n        }\r\n\r\n        await fetch(\r\n          \"https://docs.google.com/forms/d/e/1FAIpQLSe--YtN0fxM3LnliIBA4yLyhVLimQG0Tbq_MDDfQFB03XhfJg/formResponse\",\r\n          {\r\n            method: \"POST\",\r\n            mode: \"no-cors\",\r\n            body: formData,\r\n          }\r\n        );\r\n\r\n        setLoading(false);\r\n        setSuccessMessage(\"Thank you for your message. We'll get back to you soon!\");\r\n        \r\n        // Reset form\r\n        setSelectedChallenges([]);\r\n        setOtherValue(\"\");\r\n        handleChange(\"name\", \"\");\r\n        handleChange(\"email\", \"\");\r\n        handleChange(\"message\", \"\");\r\n        handleChange(\"challenges\", []);\r\n        handleChange(\"otherChallenge\", \"\");\r\n      } catch (error) {\r\n        setLoading(false);\r\n        setSuccessMessage(\"There was an error sending your message. Please try again.\");\r\n        console.error(\"Error submitting form:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Block title={title} content={content} />\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <FormGroup onSubmit={submitForm}>\r\n            <Col span={24}>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Your Name\"\r\n                value={values.name}\r\n                onChange={handleInputChange}\r\n              />\r\n              {errors.name && <Span>{errors.name}</Span>}\r\n            </Col>\r\n            <Col span={24}>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                placeholder=\"Your Email\"\r\n                value={values.email}\r\n                onChange={handleInputChange}\r\n              />\r\n              {errors.email && <Span>{errors.email}</Span>}\r\n            </Col>\r\n            <Col span={24}>\r\n              <Label>What is your challenge in leading your team?</Label>\r\n              {[...challengeOptions, \"Other\"].map((challenge) => (\r\n                <ChallengeOption key={challenge}>\r\n                  <ChallengeLabel>\r\n                    <Checkbox\r\n                      type=\"checkbox\"\r\n                      checked={selectedChallenges.includes(challenge)}\r\n                      onChange={() => handleChallengeChange(challenge)}\r\n                    />\r\n                    {challenge}\r\n                  </ChallengeLabel>\r\n                  {challenge === \"Other\" && selectedChallenges.includes(\"Other\") && (\r\n                    <OtherInputContainer>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"other-input\"\r\n                        name=\"otherChallenge\"\r\n                        placeholder=\"Your challenge\"\r\n                        value={otherValue}\r\n                      onChange={(e) => {\r\n                        setOtherValue(e.target.value);\r\n                        handleChange(\"otherChallenge\", e.target.value);\r\n                      }}\r\n                      />\r\n                    </OtherInputContainer>\r\n                  )}\r\n                </ChallengeOption>\r\n              ))}\r\n              {errors.challenges && Array.isArray(errors.challenges) && (\r\n                <Span>{errors.challenges[0]}</Span>\r\n              )}\r\n            </Col>\r\n            <Col span={24}>\r\n              <TextArea\r\n                placeholder=\"Your Message\"\r\n                value={values.message}\r\n                name=\"message\"\r\n                onChange={handleInputChange}\r\n              />\r\n              {errors.message && <Span>{errors.message}</Span>}\r\n            </Col>\r\n            <ButtonContainer>\r\n              {successMessage && (\r\n                <Span style={{ color: successMessage.includes(\"error\") ? \"#ff4d4f\" : \"#52c41a\", marginBottom: \"1rem\" }}>\r\n                  {successMessage}\r\n                </Span>\r\n              )}\r\n              <Button \r\n                name=\"submit\"\r\n                color={loading ? \"secondary\" : \"primary\"}\r\n              >\r\n                {loading ? \"Sending...\" : \"Submit\"}\r\n              </Button>\r\n            </ButtonContainer>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["initialValues","name","email","message","challenges","otherChallenge","values","_values$otherChalleng","errors","test","length","includes","trim","Content","styled","Container","TextWrapper","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","ChallengeOption","ChallengeLabel","Checkbox","OtherInputContainer","challengeOptions","loading","setLoading","useState","selectedChallenges","setSelectedChallenges","otherValue","setOtherValue","successMessage","setSuccessMessage","handleChange","handleSubmit","validate","formState","setFormState","value","prevState","event","preventDefault","useForm","handleInputChange","e","target","Row","justify","align","Col","lg","md","sm","xs","Block","onSubmit","async","validationErrors","Object","keys","formData","FormData","append","forEach","challenge","fetch","method","mode","body","error","console","span","Input","type","map","checked","updatedChallenges","filter","c","handleChallengeChange","className","Array","isArray","TextArea","style","color","marginBottom","Button"],"sourceRoot":""}